from pydantic import BaseModel, Field
from langchain_core.prompts import ChatPromptTemplate


class GradeHallucinations(BaseModel):
    """Binary score for hallucination present in generation answer."""

    binary_score: str = Field(
        description="Answer is grounded in the facts, 'yes' or 'no'"
    )


def grade_hallucination(llm_chat, docs, generation):
    """
    Grades whether an LLM-generated answer is grounded in the provided set of facts.

    Args:
        llm_chat: The LLM instance with structured output capabilities.
        docs (str or list): The set of facts (documents) as context.
        generation (str): The answer generated by the LLM.

    Returns:
        dict: A dictionary containing the generation and its hallucination grade ('yes' or 'no').
    """
    # Define the structured LLM grader
    structured_llm_grader = llm_chat.with_structured_output(GradeHallucinations)

    # Define the system prompt for hallucination grading
    system = """You are a grader assessing whether an LLM generation is grounded in / supported by a set of retrieved facts. \n 
        Give a binary score 'yes' or 'no'. 'Yes' means that the answer is grounded in / supported by the set of facts."""
    
    hallucination_prompt = ChatPromptTemplate.from_messages(
        [
            ("system", system),
            ("human", "Set of facts: \n\n {documents} \n\n LLM generation: {generation}"),
        ]
    )

    # Combine the prompt and the structured LLM grader
    hallucination_grader = hallucination_prompt | structured_llm_grader

    # Convert documents to a string if they are in list format
    if isinstance(docs, list):
        docs = "\n\n".join(doc.page_content for doc in docs)

    # Invoke the hallucination grader
    grading_result = hallucination_grader.invoke({"documents": docs, "generation": generation})

    return {
        "generation": generation,
        "hallucination_grade": grading_result.binary_score
    }